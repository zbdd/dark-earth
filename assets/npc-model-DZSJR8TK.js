import{c as s}from"./solid-lwVvZ318.js";const b=({code:e,name:t,randomDropWeight:a=50,description:r="No description provided",value:i=1,id:o,collected:l=!1,quantity:d=1,uses:g=0,level:c=1,health:p=0,type:y="loot",damage:v=0,range:D=0,armour:A=0,maxArmour:u})=>{const m=o??Math.random().toString(36).substring(2,15)+"-"+e,[h,w]=s(d),[W,I]=s(A),[S,k]=s(g),[T,M]=s(l);return{code:()=>e,id:()=>m,description:()=>r,randomDropWeight:()=>a,name:()=>t,level:()=>c,collected:()=>T(),setCollected:f=>{M(f)},quantity:()=>h(),value:()=>i,updateQuantity:f=>{w(f)},uses:()=>S(),setUses:f=>{f>=0&&k(f)},health:()=>p,type:()=>y,damage:()=>v,range:()=>D,armour:()=>W(),setArmour:f=>{f>=0&&I(f)},maxArmour:()=>u!==void 0?u:W(),data:()=>({code:e,name:t,randomDropWeight:a,description:r,value:i,quantity:h(),level:c,health:p,type:y,damage:v,range:D,armour:W(),id:m,maxArmour:u!==void 0?u:W(),uses:S(),collected:T()})}},_=[{code:"boots",name:"Boots",level:2,randomDropWeight:50,description:"Basic footwear providing limited protection.",value:1,armour:1,type:"shoes"},{code:"steel-toe-boots",name:"Steel-Toe Boots",level:3,randomDropWeight:25,description:"Heavy-duty boots with reinforced toes. Ideal for kicking and surviving.",value:6,armour:2,type:"shoes"},{code:"leather-sneakers",name:"Leather Sneakers",level:1,randomDropWeight:50,description:"Worn down but flexible. Better than walking barefoot.",value:2,type:"shoes"},{code:"military-greaves",name:"Military Greaves",level:4,randomDropWeight:15,description:"Surplus-grade lower leg armour. Scarred, but solid.",value:7,armour:3,type:"shoes"},{code:"plated-shinwraps",name:"Plated Shinwraps",level:2,randomDropWeight:30,description:"Wrapped in cloth and bolted with scrap metal plates.",value:4,armour:1,type:"shoes"},{code:"cultist-footwraps",name:"Cultist Footwraps",level:1,randomDropWeight:35,description:"Bandages soaked in oil and prayer. Not hygienic.",value:1,type:"loot"},{code:"hazmat-boots",name:"Hazmat Boots",level:3,randomDropWeight:20,description:"Rubberised boots with cracked soles. Resistant to gunk, not teeth.",value:3,armour:1,type:"shoes"},{code:"soggy-slippers",name:"Soggy Slippers",level:0,randomDropWeight:60,description:"Wet, floppy, and morally offensive. Someone still wore these.",value:1,type:"loot"},{code:"tire-tread-sandals",name:"Tire-Tread Sandals",level:2,randomDropWeight:40,description:"Crafted from old tires and wire. Surprisingly durable.",value:3,armour:1,type:"shoes"},{code:"reinforced-waders",name:"Reinforced Waders",level:3,randomDropWeight:25,description:"Heavy waterproof boots reinforced with rivets and curses.",value:5,armour:2,type:"shoes"},{code:"ceremonial-toe-rings",name:"Ceremonial Toe Rings",level:0,randomDropWeight:45,description:"Technically footwear. Spiritually disappointing.",value:1,type:"loot"},{code:"leather-tunic",name:"Leather Tunic",level:4,randomDropWeight:40,description:"A tunic made of leather, providing basic protection.",value:3,armour:1,type:"helmet"},{code:"rusted-helm",name:"Rusted Helm",level:2,randomDropWeight:40,description:"A dented steel helmet from a bygone war. Still offers some protection.",value:3,armour:1,type:"helmet"},{code:"riot-visor",name:"Cracked Riot Visor",level:3,randomDropWeight:30,description:"Half of a riot helmet. The visor is shattered but still provides some defense.",value:4,armour:2,type:"helmet"},{code:"makeshift-helmet",name:"Makeshift Helmet",level:2,randomDropWeight:35,description:"A cooking pot with leather straps. Better than nothing, barely.",value:2,armour:1,type:"helmet"},{code:"military-helmet",name:"Old Military Helmet",level:4,randomDropWeight:15,description:"Kevlar-lined and surprisingly intact. Offers solid protection.",value:7,armour:3,type:"helmet"},{code:"metal-faceplate",name:"Metal Faceplate",level:3,randomDropWeight:20,description:"Welded scrap formed into a crude faceguard. Heavy but effective.",value:4,armour:2,type:"helmet"},{code:"bucket-head",name:"Bucket Head",level:1,randomDropWeight:45,description:"It’s literally just a bucket. Slightly muffles voices and incoming rocks.",value:1,armour:1,type:"helmet"}],J=[{code:"torch",name:"Torch",level:1,randomDropWeight:70,description:"A source of light.",value:.1,type:"light"},{code:"scrap",name:"Scrap",level:1,randomDropWeight:90,description:"Currency used to purchase items.",value:1,type:"currency"},{code:"ichor",name:"Ichor",level:8,randomDropWeight:10,description:"A valuable substance used by apothocaries.",value:10},{code:"seedling",name:"Seedling",level:7,randomDropWeight:20,description:"Extremely valuable essence of new life.",value:15},{code:"antigen",name:"Antigen",level:5,randomDropWeight:30,description:"A substance that stimulates the production of antibodies.",value:5},{code:"light-shard",name:"Light Shard",level:10,randomDropWeight:5,description:"A shard of pure light.",value:100},{code:"shirt",name:"Shirt",level:3,randomDropWeight:60,description:"A basic shirt.",value:1},{code:"scavenger-hood",name:"Scavenger Hood",level:1,randomDropWeight:50,description:"A makeshift hood sewn from scraps and duct tape. Blocks sunlight, not bullets.",value:1,type:"loot"},{code:"cult-mask",name:"Bone Cult Mask",level:2,randomDropWeight:20,description:"A decorative skull mask worn by wasteland cultists. Intimidating, not useful.",value:2,type:"loot"},{code:"bandana",name:"Worn Bandana",level:0,randomDropWeight:60,description:"Faded and threadbare. A nod to fashion, not function.",value:1,type:"loot"},{code:"hazmat-hood",name:"Hazmat Hood (Torn)",level:3,randomDropWeight:25,description:"A scorched hood from an old hazmat suit. Still filters some toxins.",value:5,type:"loot"}],X=[{code:"spear",name:"Spear",level:3,randomDropWeight:40,description:"A long weapon for thrusting.",value:2,type:"weapon",damage:1,range:2},{code:"knuckle-duster",name:"Knuckle Duster",level:3,randomDropWeight:40,description:"A metal knuckle for close combat.",value:2,type:"weapon",damage:2,range:1},{code:"sword",name:"Sword",level:5,randomDropWeight:30,description:"A sharp blade for slashing.",value:6,type:"weapon",damage:3,range:1},{code:"knife",name:"Knife",level:2,randomDropWeight:50,description:"A sharp blade for cutting.",value:1,type:"weapon",damage:2,range:1},{code:"bow",name:"Bow",level:4,randomDropWeight:35,description:"A good ranged weapon.",value:3,type:"weapon",damage:2,range:3}],Z=[{code:"healing-potion",name:"Healing Potion",level:3,randomDropWeight:50,description:"A potion that restores health.",value:6,health:3,type:"consumable"},{code:"city-key",name:"City Key",type:"key",level:0,randomDropWeight:0,description:"A key that unlocks the city gates.",value:0},{code:"waterskin",name:"Waterskin",level:2,randomDropWeight:60,description:"Contains precious water.",value:2,health:1,type:"consumable"}],ee=[{code:"fists",name:"Fists",quantity:1,level:0,randomDropWeight:0,description:"Your trusty haymakers.",type:"weapon",damage:1,range:1,value:0},{code:"torso",name:"Torso",quantity:1,level:0,randomDropWeight:0,description:"Your body, it's not much, but it’s all you have.",type:"armour",value:0,armour:0},{code:"head",name:"Head",quantity:1,level:0,randomDropWeight:0,description:"Your head, where all the thinking happens.",type:"helmet",value:0,armour:0},{code:"feet",name:"Feet",quantity:1,level:0,randomDropWeight:0,description:"Your feet, they carry you through life.",type:"shoes",value:0,armour:0}],te=ee.map(e=>b(e)),ae=J.map(e=>b(e)),oe=_.map(e=>b(e)),se=X.map(e=>b(e)),re=Z.map(e=>b(e)),O=[...te,...ae,...oe,...se,...re],G=e=>b({code:e.code(),name:e.name(),quantity:1,level:e.level(),randomDropWeight:e.randomDropWeight(),description:e.description(),value:e.value(),health:e.health(),type:e.type(),damage:e.damage(),range:e.range(),armour:e.armour(),maxArmour:e.maxArmour(),id:void 0}),ue=(e,t=1)=>{const a=O.find(r=>r.code()===e);if(!a)throw new Error(`Item with id ${e} not found`);return Array.from({length:t},()=>G(a))},B=(e,t)=>{const a=O.find(r=>r.code()===e);if(!a)throw new Error(`Item with id ${e} not found`);return G({...a,...t})},ne=(e,t)=>{const a=O.filter(r=>r.level()<=e&&r.level()>0);return Array.from({length:t},()=>{const r=a[Math.floor(Math.random()*a.length)];return G(r)})},C=e=>{const[t,a]=s(e),[r,i]=s(e.length===0);return{items:()=>t(),isEmpty:()=>r(),addItem:o=>{a(l=>[...l,o]),i(!1)},removeItem:o=>{const l=t().findIndex(d=>d.id()===o.id());a(d=>(l!==-1&&d.splice(l,1),d.length===0&&i(!0),d))},getItemById:o=>t().find(l=>l.id()===o),getItemByName:o=>t().find(l=>l.name()===o),getItemByCode:o=>t().find(l=>l.code()===o),isOnlyLoot:()=>t().every(o=>["loot","currency","light"].includes(o.type())),data:()=>t().map(o=>o.data())}};let H={npcsKilled:0,collectedItemsValue:0,tradedItemsValue:0,totalHealing:0,totalDamageTaken:0,totalDamageDealt:0,mostUsedWeapon:"fists",stepsTaken:0,eventsLooted:0,turns:0,npcsAlive:0,totalDamageAbsorbed:0,meleeAttacks:0,rangedAttacks:0};const j=()=>({reset:()=>{H={npcsKilled:0,collectedItemsValue:0,tradedItemsValue:0,totalHealing:0,totalDamageTaken:0,totalDamageDealt:0,mostUsedWeapon:"fists",stepsTaken:0,eventsLooted:0,turns:0,npcsAlive:0,totalDamageAbsorbed:0,meleeAttacks:0,rangedAttacks:0}},log:H,print:()=>{console.log(H),console.table(H)},load:r=>{H={...H,...r}}}),ie=e=>{var a,r,i,o;const t=((a=e.startingItems)==null?void 0:a.map(l=>b(l)))||[];return $({...e,startingItems:t,dialogues:e.dialogues||["Go away. I'm busy."],startingHealth:e.startingHealth,startingArmour:{body:(r=e.startingArmour)!=null&&r.body?b(e.startingArmour.body):void 0,head:(i=e.startingArmour)!=null&&i.head?b(e.startingArmour.head):void 0,feet:(o=e.startingArmour)!=null&&o.feet?b(e.startingArmour.feet):void 0},startingWeapon:e.startingWeapon?b(e.startingWeapon):void 0})},$=({id:e,name:t,team:a,startingSize:r=1,startPosition:i={x:0,y:0},startingItems:o=[],dialogues:l=["Go away. I'm busy."],startingHealth:d=5,startingMaxHealth:g=d,startingArmour:c={},startingWeapon:p=void 0})=>{const y=B("fists"),v=B("torso"),D=B("head"),A=B("feet"),[u,m]=s(i),[h,w]=s(d),[W]=s(C(o)),[I,S]=s(g),[k]=s(l),[T,M]=s("Go away. I'm busy."),[f,R]=s(!0),[x,E]=s(p??y),[P,U]=s(c.body??v),[V,q]=s(c.head??D),[F,z]=s(c.feet??A),[N]=s(r<1?1:r),K={id:()=>e,name:()=>t,team:()=>a,dialogue:()=>{const n=Math.floor(Math.random()*k().length);return M(k()[n]),T()},setDialogue:n=>M(n),updateTeam:n=>{n!==a&&(a=n)},isHostile:n=>a==="hostile-to-all"||a==="hostile-to-neutral"&&n!=="neutral"?!0:a==="hostile-to-player"&&n==="player",position:()=>({x:u().x,y:u().y,distanceTo:n=>{const L=n.x-u().x,Y=n.y-u().y;return Math.sqrt(L*L+Y*Y)}}),inventory:()=>W(),moveTo:(n,L)=>{K.id()==="player"&&(j().log.stepsTaken+=1),m({x:n,y:L})},health:()=>h(),setHealth:n=>{n<0?n=0:n>I()&&(n=I()),w(n)},maxHealth:()=>I(),visible:()=>f(),setVisible:n=>{R(n)},setMaxHealth:n=>{n<0&&(n=0),S(n),w(n)},bodyArmour:()=>P(),setBodyArmour:n=>{U(n||v)},headArmour:()=>V(),setHeadArmour:n=>{q(n||D)},feetArmour:()=>F(),setFeetArmour:n=>{z(n||A)},weapon:()=>x(),setWeapon:n=>{E(n||y)},size:()=>N(),data:()=>({id:e,name:t,team:a,startPosition:u(),startingItems:W().items().map(n=>n.data()),dialogues:k(),startingHealth:h(),startingArmour:{body:P()?P().data():void 0,head:V()?V().data():void 0,feet:F()?F().data():void 0},startingWeapon:x()?x().data():void 0,startingMaxHealth:I(),startingSize:N()})};return m(i),K},me=e=>{var a;const t=((a=e.startingItems)==null?void 0:a.map(r=>b(r)))||[];return le({...e,startingItems:t})},le=e=>{const{id:t,name:a,startPosition:r,startingItems:i=[],level:o}=e,[l]=s({x:r.x,y:r.y}),[d,g]=s(e.discovered??!1),[c]=s(C(i)),[p,y]=s(!0);return{id:()=>t,name:()=>a,level:()=>o,inventory:()=>c(),position:l,discovered:()=>d(),interact:()=>{d()||(g(!0),j().log.eventsLooted+=1)},visible:()=>p(),setVisible:v=>{y(v)},data:()=>({id:t,name:a,level:o,discovered:d(),startPosition:{x:l().x,y:l().y},startingItems:c().data()})}},Q=e=>{if(!e)return C([B("city-key")]);const t=5,a=new Array(t).fill(null).map((r,i)=>ne(t-i,i+1)).flat();return C(a)},pe=e=>{const t=e.startingItems.map(a=>b(a));return de({...e,startingItems:t.length>0?t:void 0})},de=e=>{const{id:t,name:a,level:r,positions:i}=e,[o,l]=s(e.isUnlocked??!1),[d,g]=s(e.startingItems?C(e.startingItems):Q(o()));return{id:()=>t,name:()=>a,level:()=>r,positions:()=>i,isUnlocked:()=>o(),setIsUnlocked:c=>{c&&!o()&&g(Q(!0)),l(c)},inventory:()=>d(),setInventory:c=>g(c),data:()=>({id:t,name:a,level:r,positions:i.map(c=>({x:c.x,y:c.y})),isUnlocked:o(),startingItems:d().items().map(c=>c.data())})}},he=e=>{const[t,a]=s(0),[r,i]=s(0),[o,l]=s([]),[d,g]=s([]),c=u=>{const m=d();m.includes(u)||(m.push(u),g([...m]))},p=u=>{const m=d(),h=m.indexOf(u);h!==-1&&(m.splice(h,1),g([...m]))},y=(u,m,h)=>{const w=o();w[u][m]=h,l([...w])},v=(u,m)=>{var h;return(h=o()[u])==null?void 0:h[m]},D=(u,m)=>[[0,1],[1,0],[0,-1],[-1,0]].map(([w,W])=>v(u+w,m+W)).filter(Boolean),A=(u,m)=>{const h=v(u,m);return h!==void 0&&h.traversable()};if(e.length>0)a(e.length),i(e[0].length),l(e);else throw new Error("Tile map must have at least one tile");return{horizontalCells:()=>t(),verticalCells:()=>r(),tiles:()=>o(),entryPoints:()=>d(),isValidMove:A,addEntryPoint:c,removeEntryPoint:p,updateTile:y,getTile:v,getNeighbors:D}},ge=e=>{const{terrain:t,corrupted:a=!1,discovered:r=!1,hasEvent:i=!1,hasEnemy:o=!1,structure:l,position:d}=e,[g]=s(t),[c,p]=s(r),[y,v]=s("HIDDEN"),[D]=s(a),[A]=s(l),[u,m]=s(!0),[h,w]=s(!1),[W,I]=s(!1),[S,k]=s(!1),T=()=>{const E=["water","mountain","sinkhole","forest","void"],P=["barricade"];return!E.includes(t)&&!P.includes(A())},M=()=>{p(!0),v(o?"DANGEROUS":"SAFE")},f=()=>{Math.random()<.3&&w(!0)},R=()=>{Math.random()<.3&&I(!0)},x=()=>{Math.random()<.05&&k(!0)};return(t==="wasteland"||t==="grass")&&f(),t==="void"&&(R(),x()),{type:()=>g(),position:()=>d,corrupted:()=>D(),structure:()=>A(),discovered:()=>c(),handleTileDiscovered:M,hasEvent:()=>i,hasEnemy:()=>o,state:()=>y(),traversable:T,visible:()=>u(),setVisible:E=>{m(E)},hasGrass:()=>h(),hasMud:()=>W(),hasEyes:()=>S(),data:()=>({terrain:g(),position:d,corrupted:D(),discovered:c(),hasEvent:i,hasEnemy:o,structure:A()})}},ve=e=>{const[t,a]=s((e==null?void 0:e.isEnabled)??!0),[r,i]=s((e==null?void 0:e.lightRadius)??192),[o,l]=s((e==null?void 0:e.fogOfWarPoints)??[]),[d,g]=s((e==null?void 0:e.revealedPoints)??[]);return{isEnabled:()=>t(),enable:p=>a(p),lightRadius:()=>r(),setLightRadius:p=>i(p),fogOfWarPoints:()=>o(),revealedPoints:()=>d(),addRevealedPoint:p=>{const y=d();y.some(v=>v.x===p.x&&v.y===p.y)||g([...y,p])},setFogOfWarPoints:p=>l(p),setRevealedPoints:p=>g(p),setToLowLight:()=>{i(128),a(!0)},setToFullLight:()=>{i(192),a(!0)},data:()=>({isEnabled:t(),lightRadius:r(),fogOfWarPoints:o(),revealedPoints:d()})}},ye=e=>{const t=ie(e),[a]=s(e.spawnling),[r,i]=s(e.lastTurnSpawned??0);return{...t,spawnling:()=>a(),lastTurnSpawned:()=>r(),setLastTurnSpawned:o=>{i(o)},data:()=>({...t.data(),spawnling:()=>{var o;return(o=a())==null?void 0:o.data()},lastTurnSpawned:()=>r()})}},fe=e=>{const t=$(e),[a]=s(e.spawnling),[r,i]=s(e.lastTurnSpawned??0);return{...t,spawnling:()=>a(),lastTurnSpawned:()=>r(),setLastTurnSpawned:o=>{i(o)},data:()=>({...t.data(),spawnling:()=>{var l;return(l=a())==null?void 0:l.data()},lastTurnSpawned:()=>r()})}};export{O as A,j as G,ye as a,me as b,pe as c,ge as d,ve as e,he as f,B as g,le as h,ue as i,$ as j,fe as k,ie as l,de as m,C as n};

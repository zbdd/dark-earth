import{c as o}from"./solid-lwVvZ318.js";const b=({code:e,name:t,randomDropWeight:a=50,description:n="No description provided",value:l=1,id:s,collected:i=!1,quantity:d=1,uses:g=0,level:c=1,health:h=0,type:y="loot",damage:v=0,range:A=0,armour:I=0,maxArmour:m})=>{const u=s??Math.random().toString(36).substring(2,15)+"-"+e,[p,W]=o(d),[D,w]=o(I),[S,k]=o(g),[M,E]=o(i);return{code:()=>e,id:()=>u,description:()=>n,randomDropWeight:()=>a,name:()=>t,level:()=>c,collected:()=>M(),setCollected:f=>{E(f)},quantity:()=>p(),value:()=>l,updateQuantity:f=>{W(f)},uses:()=>S(),setUses:f=>{f>=0&&k(f)},health:()=>h,type:()=>y,damage:()=>v,range:()=>A,armour:()=>D(),setArmour:f=>{f>=0&&w(f)},maxArmour:()=>m!==void 0?m:D(),data:()=>({code:e,name:t,randomDropWeight:a,description:n,value:l,quantity:p(),level:c,health:h,type:y,damage:v,range:A,armour:D(),id:u,maxArmour:m!==void 0?m:D(),uses:S(),collected:M()})}},_=[{code:"boots",name:"Boots",level:2,randomDropWeight:50,description:"Basic footwear providing limited protection.",value:1,armour:1,type:"shoes"},{code:"steel-toe-boots",name:"Steel-Toe Boots",level:3,randomDropWeight:25,description:"Heavy-duty boots with reinforced toes. Ideal for kicking and surviving.",value:6,armour:2,type:"shoes"},{code:"leather-sneakers",name:"Leather Sneakers",level:1,randomDropWeight:50,description:"Worn down but flexible. Better than walking barefoot.",value:2,type:"shoes"},{code:"military-greaves",name:"Military Greaves",level:4,randomDropWeight:15,description:"Surplus-grade lower leg armour. Scarred, but solid.",value:7,armour:3,type:"shoes"},{code:"plated-shinwraps",name:"Plated Shinwraps",level:2,randomDropWeight:30,description:"Wrapped in cloth and bolted with scrap metal plates.",value:4,armour:1,type:"shoes"},{code:"cultist-footwraps",name:"Cultist Footwraps",level:1,randomDropWeight:35,description:"Bandages soaked in oil and prayer. Not hygienic.",value:1,type:"loot"},{code:"hazmat-boots",name:"Hazmat Boots",level:3,randomDropWeight:20,description:"Rubberised boots with cracked soles. Resistant to gunk, not teeth.",value:3,armour:1,type:"shoes"},{code:"soggy-slippers",name:"Soggy Slippers",level:0,randomDropWeight:60,description:"Wet, floppy, and morally offensive. Someone still wore these.",value:1,type:"loot"},{code:"tire-tread-sandals",name:"Tire-Tread Sandals",level:2,randomDropWeight:40,description:"Crafted from old tires and wire. Surprisingly durable.",value:3,armour:1,type:"shoes"},{code:"reinforced-waders",name:"Reinforced Waders",level:3,randomDropWeight:25,description:"Heavy waterproof boots reinforced with rivets and curses.",value:5,armour:2,type:"shoes"},{code:"ceremonial-toe-rings",name:"Ceremonial Toe Rings",level:0,randomDropWeight:45,description:"Technically footwear. Spiritually disappointing.",value:1,type:"loot"},{code:"leather-tunic",name:"Leather Tunic",level:4,randomDropWeight:40,description:"A tunic made of leather, providing basic protection.",value:3,armour:1,type:"helmet"},{code:"rusted-helm",name:"Rusted Helm",level:2,randomDropWeight:40,description:"A dented steel helmet from a bygone war. Still offers some protection.",value:3,armour:1,type:"helmet"},{code:"riot-visor",name:"Cracked Riot Visor",level:3,randomDropWeight:30,description:"Half of a riot helmet. The visor is shattered but still provides some defense.",value:4,armour:2,type:"helmet"},{code:"makeshift-helmet",name:"Makeshift Helmet",level:2,randomDropWeight:35,description:"A cooking pot with leather straps. Better than nothing, barely.",value:2,armour:1,type:"helmet"},{code:"military-helmet",name:"Old Military Helmet",level:4,randomDropWeight:15,description:"Kevlar-lined and surprisingly intact. Offers solid protection.",value:7,armour:3,type:"helmet"},{code:"metal-faceplate",name:"Metal Faceplate",level:3,randomDropWeight:20,description:"Welded scrap formed into a crude faceguard. Heavy but effective.",value:4,armour:2,type:"helmet"},{code:"bucket-head",name:"Bucket Head",level:1,randomDropWeight:45,description:"It’s literally just a bucket. Slightly muffles voices and incoming rocks.",value:1,armour:1,type:"helmet"}],J=[{code:"torch",name:"Torch",level:1,randomDropWeight:70,description:"A source of light.",value:.1,type:"light"},{code:"scrap",name:"Scrap",level:1,randomDropWeight:90,description:"Currency used to purchase items.",value:1,type:"currency"},{code:"ichor",name:"Ichor",level:8,randomDropWeight:10,description:"A valuable substance used by apothocaries.",value:10},{code:"seedling",name:"Seedling",level:7,randomDropWeight:20,description:"Extremely valuable essence of new life.",value:15},{code:"antigen",name:"Antigen",level:5,randomDropWeight:30,description:"A substance that stimulates the production of antibodies.",value:5},{code:"light-shard",name:"Light Shard",level:10,randomDropWeight:5,description:"A shard of pure light.",value:100},{code:"shirt",name:"Shirt",level:3,randomDropWeight:60,description:"A basic shirt.",value:1},{code:"scavenger-hood",name:"Scavenger Hood",level:1,randomDropWeight:50,description:"A makeshift hood sewn from scraps and duct tape. Blocks sunlight, not bullets.",value:1,type:"loot"},{code:"cult-mask",name:"Bone Cult Mask",level:2,randomDropWeight:20,description:"A decorative skull mask worn by wasteland cultists. Intimidating, not useful.",value:2,type:"loot"},{code:"bandana",name:"Worn Bandana",level:0,randomDropWeight:60,description:"Faded and threadbare. A nod to fashion, not function.",value:1,type:"loot"},{code:"hazmat-hood",name:"Hazmat Hood (Torn)",level:3,randomDropWeight:25,description:"A scorched hood from an old hazmat suit. Still filters some toxins.",value:5,type:"loot"}],X=[{code:"spear",name:"Spear",level:3,randomDropWeight:40,description:"A long weapon for thrusting.",value:2,type:"weapon",damage:1,range:2},{code:"knuckle-duster",name:"Knuckle Duster",level:3,randomDropWeight:40,description:"A metal knuckle for close combat.",value:2,type:"weapon",damage:2,range:1},{code:"sword",name:"Sword",level:5,randomDropWeight:30,description:"A sharp blade for slashing.",value:6,type:"weapon",damage:3,range:1},{code:"knife",name:"Knife",level:2,randomDropWeight:50,description:"A sharp blade for cutting.",value:1,type:"weapon",damage:2,range:1},{code:"bow",name:"Bow",level:4,randomDropWeight:35,description:"A good ranged weapon.",value:3,type:"weapon",damage:2,range:3}],Z=[{code:"healing-potion",name:"Healing Potion",level:3,randomDropWeight:50,description:"A potion that restores health.",value:6,health:3,type:"consumable"},{code:"city-key",name:"City Key",type:"key",level:0,randomDropWeight:0,description:"A key that unlocks the city gates.",value:0},{code:"waterskin",name:"Waterskin",level:2,randomDropWeight:60,description:"Contains precious water.",value:2,health:1,type:"consumable"}],ee=[{code:"fists",name:"Fists",quantity:1,level:0,randomDropWeight:0,description:"Your trusty haymakers.",type:"weapon",damage:1,range:1,value:0},{code:"torso",name:"Torso",quantity:1,level:0,randomDropWeight:0,description:"Your body, it's not much, but it’s all you have.",type:"armour",value:0,armour:0},{code:"head",name:"Head",quantity:1,level:0,randomDropWeight:0,description:"Your head, where all the thinking happens.",type:"helmet",value:0,armour:0},{code:"feet",name:"Feet",quantity:1,level:0,randomDropWeight:0,description:"Your feet, they carry you through life.",type:"shoes",value:0,armour:0}],te=ee.map(e=>b(e)),ae=J.map(e=>b(e)),oe=_.map(e=>b(e)),se=X.map(e=>b(e)),re=Z.map(e=>b(e)),O=[...te,...ae,...oe,...se,...re],G=e=>b({code:e.code(),name:e.name(),quantity:1,level:e.level(),randomDropWeight:e.randomDropWeight(),description:e.description(),value:e.value(),health:e.health(),type:e.type(),damage:e.damage(),range:e.range(),armour:e.armour(),maxArmour:e.maxArmour(),id:void 0}),ce=(e,t=1)=>{const a=O.find(n=>n.code()===e);if(!a)throw new Error(`Item with id ${e} not found`);return Array.from({length:t},()=>G(a))},B=(e,t)=>{const a=O.find(n=>n.code()===e);if(!a)throw new Error(`Item with id ${e} not found`);return G({...a,...t})},ne=(e,t)=>{const a=O.filter(n=>n.level()<=e&&n.level()>0);return Array.from({length:t},()=>{const n=a[Math.floor(Math.random()*a.length)];return G(n)})},C=e=>{const[t,a]=o(e),[n,l]=o(e.length===0);return{items:()=>t(),isEmpty:()=>n(),addItem:s=>{a(i=>[...i,s]),l(!1)},removeItem:s=>{const i=t().findIndex(d=>d.id()===s.id());a(d=>(i!==-1&&d.splice(i,1),d.length===0&&l(!0),d))},getItemById:s=>t().find(i=>i.id()===s),getItemByName:s=>t().find(i=>i.name()===s),getItemByCode:s=>t().find(i=>i.code()===s),isOnlyLoot:()=>t().every(s=>["loot","currency","light"].includes(s.type())),data:()=>t().map(s=>s.data())}};let H={npcsKilled:0,collectedItemsValue:0,tradedItemsValue:0,totalHealing:0,totalDamageTaken:0,totalDamageDealt:0,mostUsedWeapon:"fists",stepsTaken:0,eventsLooted:0,turns:0,npcsAlive:0,totalDamageAbsorbed:0,meleeAttacks:0,rangedAttacks:0};const j=()=>({reset:()=>{H={npcsKilled:0,collectedItemsValue:0,tradedItemsValue:0,totalHealing:0,totalDamageTaken:0,totalDamageDealt:0,mostUsedWeapon:"fists",stepsTaken:0,eventsLooted:0,turns:0,npcsAlive:0,totalDamageAbsorbed:0,meleeAttacks:0,rangedAttacks:0}},log:H,print:()=>{console.log(H),console.table(H)},load:n=>{H={...H,...n}}}),me=e=>{var a,n,l,s;const t=((a=e.startingItems)==null?void 0:a.map(i=>b(i)))||[];return $({...e,startingItems:t,dialogues:e.dialogues||["Go away. I'm busy."],startingHealth:e.startingHealth,startingArmour:{body:(n=e.startingArmour)!=null&&n.body?b(e.startingArmour.body):void 0,head:(l=e.startingArmour)!=null&&l.head?b(e.startingArmour.head):void 0,feet:(s=e.startingArmour)!=null&&s.feet?b(e.startingArmour.feet):void 0},startingWeapon:e.startingWeapon?b(e.startingWeapon):void 0})},$=({id:e,name:t,team:a,startingSize:n=1,startPosition:l={x:0,y:0},startingItems:s=[],dialogues:i=["Go away. I'm busy."],startingHealth:d=5,startingMaxHealth:g=d,startingArmour:c={},startingWeapon:h=void 0})=>{const y=B("fists"),v=B("torso"),A=B("head"),I=B("feet"),[m,u]=o(l),[p,W]=o(d),[D]=o(C(s)),[w,S]=o(g),[k]=o(i),[M,E]=o("Go away. I'm busy."),[f,R]=o(!0),[x,T]=o(h??y),[P,U]=o(c.body??v),[V,q]=o(c.head??A),[F,z]=o(c.feet??I),[N]=o(n<1?1:n),K={id:()=>e,name:()=>t,team:()=>a,dialogue:()=>{const r=Math.floor(Math.random()*k().length);return E(k()[r]),M()},setDialogue:r=>E(r),updateTeam:r=>{r!==a&&(a=r)},isHostile:r=>a==="hostile-to-all"||a==="hostile-to-neutral"&&r!=="neutral"?!0:a==="hostile-to-player"&&r==="player",position:()=>({x:m().x,y:m().y,distanceTo:r=>{const L=r.x-m().x,Y=r.y-m().y;return Math.sqrt(L*L+Y*Y)}}),inventory:()=>D(),moveTo:(r,L)=>{K.id()==="player"&&(j().log.stepsTaken+=1),u({x:r,y:L})},health:()=>p(),setHealth:r=>{r<0?r=0:r>w()&&(r=w()),W(r)},maxHealth:()=>w(),visible:()=>f(),setVisible:r=>{R(r)},setMaxHealth:r=>{r<0&&(r=0),S(r),W(r)},bodyArmour:()=>P(),setBodyArmour:r=>{U(r||v)},headArmour:()=>V(),setHeadArmour:r=>{q(r||A)},feetArmour:()=>F(),setFeetArmour:r=>{z(r||I)},weapon:()=>x(),setWeapon:r=>{T(r||y)},size:()=>N(),data:()=>({id:e,name:t,team:a,startPosition:m(),startingItems:D().items().map(r=>r.data()),dialogues:k(),startingHealth:p(),startingArmour:{body:P()?P().data():void 0,head:V()?V().data():void 0,feet:F()?F().data():void 0},startingWeapon:x()?x().data():void 0,startingMaxHealth:w(),startingSize:N()})};return u(l),K},ue=e=>{var a;const t=((a=e.startingItems)==null?void 0:a.map(n=>b(n)))||[];return ie({...e,startingItems:t})},ie=e=>{const{id:t,name:a,startPosition:n,startingItems:l=[],level:s}=e,[i]=o({x:n.x,y:n.y}),[d,g]=o(e.discovered??!1),[c]=o(C(l)),[h,y]=o(!0);return{id:()=>t,name:()=>a,level:()=>s,inventory:()=>c(),position:i,discovered:()=>d(),interact:()=>{d()||(g(!0),j().log.eventsLooted+=1)},visible:()=>h(),setVisible:v=>{y(v)},data:()=>({id:t,name:a,level:s,discovered:d(),startPosition:{x:i().x,y:i().y},startingItems:c().data()})}},Q=e=>{if(!e)return C([B("city-key")]);const t=5,a=new Array(t).fill(null).map((n,l)=>ne(t-l,l+1)).flat();return C(a)},he=e=>{const t=e.startingItems.map(a=>b(a));return le({...e,startingItems:t.length>0?t:void 0})},le=e=>{const{id:t,name:a,level:n,positions:l}=e,[s,i]=o(e.isUnlocked??!1),[d,g]=o(e.startingItems?C(e.startingItems):Q(s()));return{id:()=>t,name:()=>a,level:()=>n,positions:()=>l,isUnlocked:()=>s(),setIsUnlocked:c=>{c&&!s()&&g(Q(!0)),i(c)},inventory:()=>d(),setInventory:c=>g(c),data:()=>({id:t,name:a,level:n,positions:l.map(c=>({x:c.x,y:c.y})),isUnlocked:s(),startingItems:d().items().map(c=>c.data())})}},pe=e=>{const[t,a]=o(0),[n,l]=o(0),[s,i]=o([]),[d,g]=o([]),c=m=>{const u=d();u.includes(m)||(u.push(m),g([...u]))},h=m=>{const u=d(),p=u.indexOf(m);p!==-1&&(u.splice(p,1),g([...u]))},y=(m,u,p)=>{const W=s();W[m][u]=p,i([...W])},v=(m,u)=>{var p;return(p=s()[m])==null?void 0:p[u]},A=(m,u)=>[[0,1],[1,0],[0,-1],[-1,0]].map(([W,D])=>v(m+W,u+D)).filter(Boolean),I=(m,u)=>{const p=v(m,u);return p!==void 0&&p.traversable()};if(e.length>0)a(e.length),l(e[0].length),i(e);else throw new Error("Tile map must have at least one tile");return{horizontalCells:()=>t(),verticalCells:()=>n(),tiles:()=>s(),entryPoints:()=>d(),isValidMove:I,addEntryPoint:c,removeEntryPoint:h,updateTile:y,getTile:v,getNeighbors:A}},ge=e=>{const{terrain:t,corrupted:a=!1,discovered:n=!1,hasEvent:l=!1,hasEnemy:s=!1,structure:i,position:d}=e,[g]=o(t),[c,h]=o(n),[y,v]=o("HIDDEN"),[A]=o(a),[I]=o(i),[m,u]=o(!0),[p,W]=o(!1),[D,w]=o(!1),[S,k]=o(!1),M=()=>{const T=["water","mountain","sinkhole","forest","void"],P=["barricade"];return!T.includes(t)&&!P.includes(I())},E=()=>{h(!0),v(s?"DANGEROUS":"SAFE")},f=()=>{Math.random()<.3&&W(!0)},R=()=>{Math.random()<.3&&w(!0)},x=()=>{Math.random()<.05&&k(!0)};return(t==="wasteland"||t==="grass")&&f(),t==="void"&&(R(),x()),{type:()=>g(),position:()=>d,corrupted:()=>A(),structure:()=>I(),discovered:()=>c(),handleTileDiscovered:E,hasEvent:()=>l,hasEnemy:()=>s,state:()=>y(),traversable:M,visible:()=>m(),setVisible:T=>{u(T)},hasGrass:()=>p(),hasMud:()=>D(),hasEyes:()=>S(),data:()=>({terrain:g(),position:d,corrupted:A(),discovered:c(),hasEvent:l,hasEnemy:s,structure:I()})}},ve=e=>{const[t,a]=o((e==null?void 0:e.isEnabled)??!0),[n,l]=o((e==null?void 0:e.lightRadius)??192),[s,i]=o((e==null?void 0:e.fogOfWarPoints)??[]),[d,g]=o((e==null?void 0:e.revealedPoints)??[]);return{isEnabled:()=>t(),enable:h=>a(h),lightRadius:()=>n(),setLightRadius:h=>l(h),fogOfWarPoints:()=>s(),revealedPoints:()=>d(),addRevealedPoint:h=>{const y=d();y.some(v=>v.x===h.x&&v.y===h.y)||g([...y,h])},setFogOfWarPoints:h=>i(h),setRevealedPoints:h=>g(h),setToLowLight:()=>{l(128),a(!0)},setToFullLight:()=>{l(192),a(!0)},data:()=>({isEnabled:t(),lightRadius:n(),fogOfWarPoints:s(),revealedPoints:d()})}},ye=e=>{const t=$(e),[a]=o(e.spawnling),[n,l]=o(e.lastTurnSpawned??0);return{...t,spawnling:()=>a(),lastTurnSpawned:()=>n(),setLastTurnSpawned:s=>{l(s)},data:()=>({...t.data(),spawnling:()=>{var i;return(i=a())==null?void 0:i.data()},lastTurnSpawned:()=>n()})}};export{O as A,j as G,ue as a,he as b,ye as c,ge as d,ve as e,pe as f,B as g,ie as h,ce as i,$ as j,le as k,me as l,C as m};

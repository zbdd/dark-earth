import{c as o}from"./solid-lwVvZ318.js";const D=({code:e,name:t,randomDropWeight:a=50,description:r="No description provided",value:l=1,id:s,collected:d=!1,quantity:c=1,uses:g=0,level:i=1,health:b=0,type:y="loot",damage:f=0,range:A=0,armour:I=0,maxArmour:w})=>{const h=s??Math.random().toString(36).substring(2,15)+"-"+e,[u,m]=o(c),[v,W]=o(I),[T,M]=o(g),[E,H]=o(d),[B]=o((()=>{var S;const p=(S=F.find(P=>P.code()===e))==null?void 0:S.type;return e==="scavenger-hood"&&console.log(`
                Item with code "${e}" with type ${y} has type "${p==null?void 0:p()}".`),(p==null?void 0:p())??y})());return{code:()=>e,id:()=>h,description:()=>r,randomDropWeight:()=>a,name:()=>t,level:()=>i,collected:()=>E(),setCollected:p=>{H(p)},quantity:()=>u(),value:()=>l,updateQuantity:p=>{m(p)},uses:()=>T(),setUses:p=>{p>=0&&M(p)},health:()=>b,type:()=>B(),damage:()=>f,range:()=>A,armour:()=>v(),setArmour:p=>{p>=0&&W(p)},maxArmour:()=>w!==void 0?w:v(),data:()=>({code:e,name:t,randomDropWeight:a,description:r,value:l,quantity:u(),level:i,health:b,type:y,damage:f,range:A,armour:v(),id:h,maxArmour:w!==void 0?w:v(),uses:T(),collected:E()})}},_=[{code:"boots",name:"Boots",level:2,randomDropWeight:50,description:"Basic footwear providing limited protection.",value:1,armour:1,type:"shoes"},{code:"steel-toe-boots",name:"Steel-Toe Boots",level:3,randomDropWeight:25,description:"Heavy-duty boots with reinforced toes. Ideal for kicking and surviving.",value:6,armour:2,type:"shoes"},{code:"leather-sneakers",name:"Leather Sneakers",level:1,randomDropWeight:50,description:"Worn down but flexible. Better than walking barefoot.",value:2,type:"shoes"},{code:"military-greaves",name:"Military Greaves",level:4,randomDropWeight:15,description:"Surplus-grade lower leg armour. Scarred, but solid.",value:7,armour:3,type:"shoes"},{code:"plated-shinwraps",name:"Plated Shinwraps",level:2,randomDropWeight:30,description:"Wrapped in cloth and bolted with scrap metal plates.",value:4,armour:1,type:"shoes"},{code:"cultist-footwraps",name:"Cultist Footwraps",level:1,randomDropWeight:35,description:"Bandages soaked in oil and prayer. Not hygienic.",value:1,type:"shoes"},{code:"hazmat-boots",name:"Hazmat Boots",level:3,randomDropWeight:20,description:"Rubberised boots with cracked soles. Resistant to gunk, not teeth.",value:3,armour:1,type:"shoes"},{code:"soggy-slippers",name:"Soggy Slippers",level:0,randomDropWeight:60,description:"Wet, floppy, and morally offensive. Someone still wore these.",value:1,type:"shoes"},{code:"tire-tread-sandals",name:"Tire-Tread Sandals",level:2,randomDropWeight:40,description:"Crafted from old tires and wire. Surprisingly durable.",value:3,armour:1,type:"shoes"},{code:"reinforced-waders",name:"Reinforced Waders",level:3,randomDropWeight:25,description:"Heavy waterproof boots reinforced with rivets and curses.",value:5,armour:2,type:"shoes"},{code:"ceremonial-toe-rings",name:"Ceremonial Toe Rings",level:0,randomDropWeight:45,description:"Technically footwear. Spiritually disappointing.",value:1,type:"shoes"},{code:"leather-tunic",name:"Leather Tunic",level:4,randomDropWeight:40,description:"A tunic made of leather, providing basic protection.",value:3,armour:1,type:"armour"},{code:"rusted-helm",name:"Rusted Helm",level:2,randomDropWeight:40,description:"A dented steel helmet from a bygone war. Still offers some protection.",value:3,armour:1,type:"helmet"},{code:"riot-visor",name:"Cracked Riot Visor",level:3,randomDropWeight:30,description:"Half of a riot helmet. The visor is shattered but still provides some defense.",value:4,armour:2,type:"helmet"},{code:"makeshift-helmet",name:"Makeshift Helmet",level:2,randomDropWeight:35,description:"A cooking pot with leather straps. Better than nothing, barely.",value:2,armour:1,type:"helmet"},{code:"military-helmet",name:"Old Military Helmet",level:4,randomDropWeight:15,description:"Kevlar-lined and surprisingly intact. Offers solid protection.",value:7,armour:3,type:"helmet"},{code:"metal-faceplate",name:"Metal Faceplate",level:3,randomDropWeight:20,description:"Welded scrap formed into a crude faceguard. Heavy but effective.",value:4,armour:2,type:"helmet"},{code:"bucket-head",name:"Bucket Head",level:1,randomDropWeight:45,description:"It’s literally just a bucket. Slightly muffles voices and incoming rocks.",value:1,armour:1,type:"helmet"}],J=[{code:"torch",name:"Torch",level:1,randomDropWeight:70,description:"A source of light.",value:.1,type:"light"},{code:"coin",name:"Coin",level:1,randomDropWeight:90,description:"Used to purchase items.",value:1,type:"currency"},{code:"ichor",name:"Ichor",level:8,randomDropWeight:10,description:"A valuable substance used by apothecaries.",value:10},{code:"seedling",name:"Seedling",level:7,randomDropWeight:20,description:"Extremely valuable essence of new life.",value:15},{code:"antigen",name:"Antigen",level:5,randomDropWeight:30,description:"A substance that stimulates the production of antibodies.",value:5},{code:"light-shard",name:"Light Shard",level:10,randomDropWeight:5,description:"A shard of pure light.",value:100},{code:"shirt",name:"Shirt",level:3,randomDropWeight:60,description:"A basic shirt.",value:1,type:"armour"},{code:"scavenger-hood",name:"Scavenger Hood",level:1,randomDropWeight:50,description:"A makeshift hood sewn from scraps and duct tape. Blocks sunlight, not bullets.",value:1,type:"helmet"},{code:"cult-mask",name:"Bone Cult Mask",level:2,randomDropWeight:20,description:"A decorative skull mask worn by wasteland cultists. Intimidating, not useful.",value:2,type:"helmet"},{code:"bandana",name:"Worn Bandana",level:0,randomDropWeight:60,description:"Faded and threadbare. A nod to fashion, not function.",value:1,type:"helmet"},{code:"hazmat-hood",name:"Hazmat Hood (Torn)",level:3,randomDropWeight:25,description:"A scorched hood from an old hazmat suit. Still filters some toxins.",value:5,type:"helmet"}],X=[{code:"spear",name:"Spear",level:3,randomDropWeight:40,description:"A long weapon for thrusting.",value:2,type:"weapon",damage:1,range:2},{code:"knuckle-duster",name:"Knuckle Duster",level:3,randomDropWeight:40,description:"A metal knuckle for close combat.",value:2,type:"weapon",damage:2,range:1},{code:"sword",name:"Sword",level:5,randomDropWeight:30,description:"A sharp blade for slashing.",value:6,type:"weapon",damage:3,range:1},{code:"knife",name:"Knife",level:2,randomDropWeight:50,description:"A sharp blade for cutting.",value:1,type:"weapon",damage:2,range:1},{code:"bow",name:"Bow",level:4,randomDropWeight:35,description:"A good ranged weapon.",value:3,type:"weapon",damage:2,range:3}],Z=[{code:"healing-potion",name:"Healing Potion",level:3,randomDropWeight:50,description:"A potion that restores health.",value:6,health:3,type:"consumable"},{code:"city-key",name:"City Key",type:"key",level:0,randomDropWeight:0,description:"A key that unlocks the city gates.",value:0},{code:"waterskin",name:"Waterskin",level:2,randomDropWeight:60,description:"Contains precious water.",value:2,health:1,type:"consumable"}],ee=[{code:"fists",name:"Fists",quantity:1,level:0,randomDropWeight:0,description:"Your trusty haymakers.",type:"weapon",damage:1,range:1,value:0},{code:"torso",name:"Torso",quantity:1,level:0,randomDropWeight:0,description:"Your body, it's not much, but it’s all you have.",type:"armour",value:0,armour:0},{code:"head",name:"Head",quantity:1,level:0,randomDropWeight:0,description:"Your head, where all the thinking happens.",type:"helmet",value:0,armour:0},{code:"feet",name:"Feet",quantity:1,level:0,randomDropWeight:0,description:"Your feet, they carry you through life.",type:"shoes",value:0,armour:0}],F=[],te=ee.map(e=>D(e)),ae=J.map(e=>D(e)),oe=_.map(e=>D(e)),se=X.map(e=>D(e)),re=Z.map(e=>D(e));F.push(...te,...ae,...oe,...se,...re);const z=e=>D({code:e.code(),name:e.name(),quantity:1,level:e.level(),randomDropWeight:e.randomDropWeight(),description:e.description(),value:e.value(),health:e.health(),type:e.type(),damage:e.damage(),range:e.range(),armour:e.armour(),maxArmour:e.maxArmour(),id:void 0}),ue=(e,t=1)=>{const a=F.find(r=>r.code()===e);if(!a)throw new Error(`Item with id ${e} not found`);return Array.from({length:t},()=>z(a))},N=(e,t)=>{const a=F.find(r=>r.code()===e);if(!a)throw new Error(`Item with id ${e} not found`);return z({...a,...t})},ne=(e,t)=>{const a=F.filter(r=>r.level()<=e&&r.level()>0);return Array.from({length:t},()=>{const r=a[Math.floor(Math.random()*a.length)];return z(r)})},V=e=>{const[t,a]=o(e),[r,l]=o(e.length===0);return{items:()=>t(),isEmpty:()=>r(),addItem:s=>{a(d=>[...d,s]),l(!1)},removeItem:s=>{const d=t().findIndex(c=>c.id()===s.id());a(c=>(d!==-1&&c.splice(d,1),c.length===0&&l(!0),c))},getItemById:s=>t().find(d=>d.id()===s),getItemByName:s=>t().find(d=>d.name()===s),getItemByCode:s=>t().find(d=>d.code()===s),isOnlyLoot:()=>t().every(s=>["loot","currency","light"].includes(s.type())),data:()=>t().map(s=>s.data())}};let x={npcsKilled:0,collectedItemsValue:0,tradedItemsValue:0,totalHealing:0,totalDamageTaken:0,totalDamageDealt:0,mostUsedWeapon:"fists",stepsTaken:0,eventsLooted:0,turns:0,npcsAlive:0,totalDamageAbsorbed:0,meleeAttacks:0,rangedAttacks:0};const Q=()=>({reset:()=>{x={npcsKilled:0,collectedItemsValue:0,tradedItemsValue:0,totalHealing:0,totalDamageTaken:0,totalDamageDealt:0,mostUsedWeapon:"fists",stepsTaken:0,eventsLooted:0,turns:0,npcsAlive:0,totalDamageAbsorbed:0,meleeAttacks:0,rangedAttacks:0}},log:x,print:()=>{console.log(x),console.table(x)},load:r=>{x={...x,...r}}}),ie=e=>{var a,r,l,s;const t=((a=e.startingItems)==null?void 0:a.map(d=>D(d)))||[];return j({...e,startingItems:t,dialogues:e.dialogues||["Go away. I'm busy."],startingHealth:e.startingHealth,startingArmour:{body:(r=e.startingArmour)!=null&&r.body?D(e.startingArmour.body):void 0,head:(l=e.startingArmour)!=null&&l.head?D(e.startingArmour.head):void 0,feet:(s=e.startingArmour)!=null&&s.feet?D(e.startingArmour.feet):void 0},startingWeapon:e.startingWeapon?D(e.startingWeapon):void 0})},j=({id:e,name:t,team:a,startingSize:r=1,startPosition:l={x:0,y:0},startingItems:s=[],dialogues:d=["Go away. I'm busy."],startingHealth:c=5,startingMaxHealth:g=c,startingArmour:i={},startingWeapon:b=void 0})=>{const y=N("fists"),f=N("torso"),A=N("head"),I=N("feet"),[w,h]=o(l),[u,m]=o(c),[v]=o(V(s)),[W,T]=o(g),[M]=o(d),[E,H]=o("Go away. I'm busy."),[B,p]=o(!0),[S,P]=o(b??y),[C,O]=o(i.body??f),[L,U]=o(i.head??A),[R,k]=o(i.feet??I),[G]=o(r<1?1:r),K={id:()=>e,name:()=>t,team:()=>a,dialogue:()=>{const n=Math.floor(Math.random()*M().length);return H(M()[n]),E()},setDialogue:n=>H(n),updateTeam:n=>{n!==a&&(a=n)},isHostile:n=>a==="hostile-to-all"||a==="hostile-to-neutral"&&n!=="neutral"?!0:a==="hostile-to-player"&&n==="player",position:()=>({x:w().x,y:w().y,distanceTo:n=>{const q=n.x-w().x,$=n.y-w().y;return Math.sqrt(q*q+$*$)}}),inventory:()=>v(),moveTo:(n,q)=>{K.id()==="player"&&(Q().log.stepsTaken+=1),h({x:n,y:q})},health:()=>u(),setHealth:n=>{n<0?n=0:n>W()&&(n=W()),m(n)},maxHealth:()=>W(),visible:()=>B(),setVisible:n=>{p(n)},setMaxHealth:n=>{n<0&&(n=0),T(n),m(n)},bodyArmour:()=>C(),setBodyArmour:n=>{O(n||f)},headArmour:()=>L(),setHeadArmour:n=>{U(n||A)},feetArmour:()=>R(),setFeetArmour:n=>{k(n||I)},weapon:()=>S(),setWeapon:n=>{P(n||y)},size:()=>G(),data:()=>({id:e,name:t,team:a,startPosition:w(),startingItems:v().items().map(n=>n.data()),dialogues:M(),startingHealth:u(),startingArmour:{body:C()?C().data():void 0,head:L()?L().data():void 0,feet:R()?R().data():void 0},startingWeapon:S()?S().data():void 0,startingMaxHealth:W(),startingSize:G()})};return h(l),K},me=e=>{var a;const t=((a=e.startingItems)==null?void 0:a.map(r=>D(r)))||[];return le({...e,startingItems:t})},le=e=>{const{id:t,name:a,startPosition:r,startingItems:l=[],level:s}=e,[d]=o({x:r.x,y:r.y}),[c,g]=o(e.discovered??!1),[i]=o(V(l)),[b,y]=o(!0);return{id:()=>t,name:()=>a,level:()=>s,inventory:()=>i(),position:d,discovered:()=>c(),interact:()=>{c()||(g(!0),Q().log.eventsLooted+=1)},visible:()=>b(),setVisible:f=>{y(f)},data:()=>({id:t,name:a,level:s,discovered:c(),startPosition:{x:d().x,y:d().y},startingItems:i().data()})}},Y=e=>{if(!e)return V([N("city-key")]);const t=5,a=new Array(t).fill(null).map((r,l)=>ne(t-l,l+1)).flat();return V(a)},he=e=>{const t=e.startingItems.map(a=>D(a));return de({...e,startingItems:t.length>0?t:void 0})},de=e=>{const{id:t,name:a,level:r,positions:l}=e,[s,d]=o(e.isUnlocked??!1),[c,g]=o(e.startingItems?V(e.startingItems):Y(s()));return{id:()=>t,name:()=>a,level:()=>r,positions:()=>l,isUnlocked:()=>s(),setIsUnlocked:i=>{i&&!s()&&g(Y(!0)),d(i)},inventory:()=>c(),setInventory:i=>g(i),data:()=>({id:t,name:a,level:r,positions:l.map(i=>({x:i.x,y:i.y})),isUnlocked:s(),startingItems:c().items().map(i=>i.data())})}},pe=e=>{const[t,a]=o(0),[r,l]=o(0),[s,d]=o([]),[c,g]=o([]),i=h=>{const u=c();u.includes(h)||(u.push(h),g([...u]))},b=h=>{const u=c(),m=u.indexOf(h);m!==-1&&(u.splice(m,1),g([...u]))},y=(h,u,m)=>{const v=s();v[h][u]=m,d([...v])},f=(h,u)=>{var m;return(m=s()[h])==null?void 0:m[u]},A=(h,u)=>[[0,1],[1,0],[0,-1],[-1,0],[1,1],[1,-1],[-1,1],[-1,-1]].map(([v,W])=>f(h+v,u+W)).filter(Boolean),I=(h,u)=>{const m=f(h,u);return m!==void 0&&m.traversable()};if(e.length>0)a(e.length),l(e[0].length),d(e);else throw new Error("Tile map must have at least one tile");return(()=>{const h=s();for(let u=0;u<t();u++)for(let m=0;m<r();m++){const v=h[u][m],W=A(u,m);v.setEdges(W.map(T=>T.type())),v.setNeighbours(W)}})(),{horizontalCells:()=>t(),verticalCells:()=>r(),tiles:()=>s(),entryPoints:()=>c(),isValidMove:I,addEntryPoint:i,removeEntryPoint:b,updateTile:y,getTile:f,getNeighbors:A}},ge=e=>{const{terrain:t,corrupted:a=!1,discovered:r=!1,hasEvent:l=!1,hasEnemy:s=!1,structure:d,position:c}=e,[g]=o(t),[i,b]=o(r),[y,f]=o("HIDDEN"),[A]=o(a),[I]=o(d),[w,h]=o(!0),[u,m]=o(!1),[v,W]=o(!1),[T,M]=o(!1),[E,H]=o([]),[B,p]=o(!1),[S,P]=o(e.edges??[]),C=()=>{const k=["water","mountain","sinkhole","forest","void"],G=["barricade"];return!k.includes(t)&&!G.includes(I())},O=()=>{b(!0),f(s?"DANGEROUS":"SAFE")},L=()=>{Math.random()<.3&&m(!0)},U=()=>{Math.random()<.3&&W(!0)},R=()=>{Math.random()<.05&&M(!0)};return(t==="wasteland"||t==="grass")&&L(),t==="void"&&(U(),R()),{type:()=>g(),position:()=>c,corrupted:()=>A(),structure:()=>I(),discovered:()=>i(),handleTileDiscovered:O,hasEvent:()=>l,hasEnemy:()=>s,state:()=>y(),traversable:C,visible:()=>w(),setVisible:k=>{h(k)},hasGrass:()=>u(),hasMud:()=>v(),hasEyes:()=>T(),neighbours:E,setNeighbours:k=>{H(k)},edges:()=>S(),setEdges:k=>{P(k)},isSelected:B,setIsSelected:p,data:()=>({terrain:g(),position:c,corrupted:A(),discovered:i(),hasEvent:l,hasEnemy:s,structure:I(),edges:S()})}},ve=e=>{const[t,a]=o((e==null?void 0:e.isEnabled)??!0),[r,l]=o((e==null?void 0:e.lightRadius)??224),[s,d]=o((e==null?void 0:e.fogOfWarPoints)??[]),[c,g]=o((e==null?void 0:e.revealedPoints)??[]);return{isEnabled:()=>t(),enable:i=>a(i),lightRadius:()=>r(),setLightRadius:i=>l(i),fogOfWarPoints:()=>s(),revealedPoints:()=>c(),addRevealedPoint:i=>{const b=c();b.some(y=>y.x===i.x&&y.y===i.y)||g([...b,i])},setFogOfWarPoints:i=>d(i),setRevealedPoints:i=>g(i),setToLowLight:()=>{l(128),a(!0)},setToFullLight:()=>{l(224),a(!0)},data:()=>({isEnabled:t(),lightRadius:r(),fogOfWarPoints:s(),revealedPoints:c()})}},ye=e=>{const t=ie(e),[a]=o(e.spawnling),[r,l]=o(e.lastTurnSpawned??0);return{...t,spawnling:()=>a(),lastTurnSpawned:()=>r(),setLastTurnSpawned:s=>{l(s)},data:()=>({...t.data(),spawnling:()=>{var s;return(s=a())==null?void 0:s.data()},lastTurnSpawned:()=>r()})}},fe=e=>{const t=j(e),[a]=o(e.spawnling),[r,l]=o(e.lastTurnSpawned??0);return{...t,spawnling:()=>a(),lastTurnSpawned:()=>r(),setLastTurnSpawned:s=>{l(s)},data:()=>({...t.data(),spawnling:()=>{var d;return(d=a())==null?void 0:d.data()},lastTurnSpawned:()=>r()})}};export{F as A,Q as G,ye as a,me as b,he as c,ge as d,ve as e,pe as f,N as g,le as h,ue as i,j,fe as k,ie as l,de as m,V as n};
